using CsvCompareApp.Models;

namespace CsvCompareApp.Services
{
    public class ComparisonService
    {
        public ComparisonResult CompareTwoColumns(List<Dictionary<string, object>> records, string columnA, string columnB)
        {
            var result = new ComparisonResult();
            
            Console.WriteLine($"=== SO S√ÅNH HAI C·ªòT: {columnA} ‚Üî {columnB} ===\n");

            // So s√°nh t·ª´ng d√≤ng
            Console.WriteLine("1Ô∏è‚É£ C√°c d√≤ng c√≥ gi√° tr·ªã kh√°c nhau:");
            for (int i = 0; i < records.Count; i++)
            {
                var valueA = records[i].GetValueOrDefault(columnA, "").ToString();
                var valueB = records[i].GetValueOrDefault(columnB, "").ToString();
                
                if (valueA != valueB)
                {
                    string difference = $"   D√≤ng {i + 1}: {columnA}='{valueA}', {columnB}='{valueB}'";
                    Console.WriteLine(difference);
                    result.Differences.Add(difference);
                }
            }
            
            if (result.Differences.Count == 0)
            {
                Console.WriteLine("   Kh√¥ng c√≥ d√≤ng n√†o kh√°c nhau.");
            }

            // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói gi√° tr·ªã
            var countsInA = records
                .Select(r => r.GetValueOrDefault(columnA, "").ToString())
                .Where(a => !string.IsNullOrEmpty(a))
                .GroupBy(a => a!)
                .ToDictionary(g => g.Key, g => g.Count());

            var countsInB = records
                .Select(r => r.GetValueOrDefault(columnB, "").ToString())
                .Where(b => !string.IsNullOrEmpty(b))
                .GroupBy(b => b!)
                .ToDictionary(g => g.Key, g => g.Count());

            // So s√°nh s·ªë l·∫ßn xu·∫•t hi·ªán
            var allKeys = countsInA.Keys.Union(countsInB.Keys).ToList();
            
            Console.WriteLine("\n2Ô∏è‚É£ S·ªë l·∫ßn xu·∫•t hi·ªán kh√°c nhau:");
            foreach (var key in allKeys)
            {
                int countA = countsInA.GetValueOrDefault(key, 0);
                int countB = countsInB.GetValueOrDefault(key, 0);
                
                if (countA != countB)
                {
                    string mismatch = $"   üìä Gi√° tr·ªã '{key}': {columnA}: {countA} l·∫ßn, {columnB}: {countB} l·∫ßn";
                    Console.WriteLine(mismatch);
                    result.AmountMismatches.Add(mismatch);
                }
            }

            // T√¨m gi√° tr·ªã ch·ªâ c√≥ trong A ho·∫∑c B
            var onlyInA = countsInA.Keys.Where(k => !countsInB.ContainsKey(k));
            var onlyInB = countsInB.Keys.Where(k => !countsInA.ContainsKey(k));

            Console.WriteLine($"\n3Ô∏è‚É£ Ch·ªâ c√≥ trong {columnA}:");
            foreach (var a in onlyInA)
            {
                string onlyA = $"   ‚û°Ô∏è {a} ({countsInA[a]} l·∫ßn)";
                Console.WriteLine(onlyA);
                result.OnlyInFirst.Add(onlyA);
            }
            
            if (!onlyInA.Any())
            {
                Console.WriteLine($"   ‚úÖ Kh√¥ng c√≥ gi√° tr·ªã n√†o ch·ªâ c√≥ trong {columnA}.");
            }

            Console.WriteLine($"\n4Ô∏è‚É£ Ch·ªâ c√≥ trong {columnB}:");
            foreach (var b in onlyInB)
            {
                string onlyB = $"   {b} ({countsInB[b]} l·∫ßn)";
                Console.WriteLine(onlyB);
                result.OnlyInSecond.Add(onlyB);
            }
            
            if (!onlyInB.Any())
            {
                Console.WriteLine($"   Kh√¥ng c√≥ gi√° tr·ªã n√†o ch·ªâ c√≥ trong {columnB}.");
            }

            // T√≥m t·∫Øt
            result.TotalFirstGroup = countsInA.Values.Sum();
            result.TotalSecondGroup = countsInB.Values.Sum();
            
            return result;
        }

        public ComparisonResult CompareGroupColumns(List<Dictionary<string, object>> records, 
            GroupColumnConfiguration groupA, GroupColumnConfiguration groupB)
        {
            var result = new ComparisonResult();
            
            Console.WriteLine($"=== üîç ƒê·ªêI CHI·∫æU D·ªÆ LI·ªÜU: {groupA.GroupName} ‚Üî {groupB.GroupName} ===\n");

            // T·∫°o dictionary cho m·ªói nh√≥m v·ªõi ID d∆∞·ªõi d·∫°ng s·ªë nguy√™n
            var dictA = CreateGroupDictionary(records, groupA);
            var dictB = CreateGroupDictionary(records, groupB);

            result.TotalFirstGroup = dictA.Count;
            result.TotalSecondGroup = dictB.Count;

            Console.WriteLine($"üìä ƒê√£ t·∫£i: {dictA.Count} d√≤ng t·ª´ {groupA.GroupName}, {dictB.Count} d√≤ng t·ª´ {groupB.GroupName}\n");

            // 1. So s√°nh ID kh·ªõp nh∆∞ng Amount kh√°c
            Console.WriteLine($"1Ô∏è‚É£ üí∞ C√ÅC ID KH·ªöP NH∆ØNG S·ªê TI·ªÄN KH√ÅC NHAU:");
            foreach (var kvp in dictA)
            {
                long id = kvp.Key;
                decimal amountA = kvp.Value;
                
                if (dictB.ContainsKey(id))
                {
                    decimal amountB = dictB[id];
                    if (amountA != amountB)
                    {
                        var difference = amountA - amountB;
                        string sign = difference > 0 ? "+" : "";
                        string mismatch = $"   üÜî ID: {id:D6} | {groupA.GroupName}: {amountA:N0}ƒë | {groupB.GroupName}: {amountB:N0}ƒë | üìà Ch√™nh: {sign}{difference:N0}ƒë";
                        Console.WriteLine(mismatch);
                        result.AmountMismatches.Add(mismatch);
                    }
                }
            }
            
            if (result.AmountMismatches.Count == 0)
            {
                Console.WriteLine("   ‚úÖ Tuy·ªát v·ªùi! Kh√¥ng c√≥ ID n√†o l·ªách s·ªë ti·ªÅn.");
            }

            // 2. ID ch·ªâ c√≥ ·ªü nh√≥m A
            Console.WriteLine($"\n2Ô∏è‚É£ ‚û°Ô∏è C√ÅC ID CH·ªà C√ì TRONG {groupA.GroupName}:");
            var onlyInA = dictA.Keys.Where(id => !dictB.ContainsKey(id)).ToList();
            foreach (var id in onlyInA)
            {
                string onlyA = $"   üîπ ID: {id:D6} | S·ªë ti·ªÅn: {dictA[id]:N0}ƒë";
                Console.WriteLine(onlyA);
                result.OnlyInFirst.Add(onlyA);
            }
            
            if (onlyInA.Count == 0)
            {
                Console.WriteLine($"   ‚úÖ Kh√¥ng c√≥ ID n√†o ch·ªâ c√≥ trong {groupA.GroupName}.");
            }

            // 3. ID ch·ªâ c√≥ ·ªü nh√≥m B
            Console.WriteLine($"\n3Ô∏è‚É£ ‚¨ÖÔ∏è C√ÅC ID CH·ªà C√ì TRONG {groupB.GroupName}:");
            var onlyInB = dictB.Keys.Where(id => !dictA.ContainsKey(id)).ToList();
            foreach (var id in onlyInB)
            {
                string onlyB = $"   üî∏ ID: {id:D6} | S·ªë ti·ªÅn: {dictB[id]:N0}ƒë";
                Console.WriteLine(onlyB);
                result.OnlyInSecond.Add(onlyB);
            }
            
            if (onlyInB.Count == 0)
            {
                Console.WriteLine($"   ‚úÖ Kh√¥ng c√≥ ID n√†o ch·ªâ c√≥ trong {groupB.GroupName}.");
            }

            // T√≠nh s·ªë kh·ªõp ho√†n to√†n
            result.PerfectMatches = dictA.Keys.Count(id => dictB.ContainsKey(id) && dictA[id] == dictB[id]);

            // T·ªïng k·∫øt v·ªõi emoji v√† ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
            Console.WriteLine($"\n" + new string('=', 55));
            Console.WriteLine($"üìã T·ªîNG K·∫æT ƒê·ªêI CHI·∫æU");
            Console.WriteLine($"" + new string('=', 55));
            Console.WriteLine($"üìä T·ªïng ID trong {groupA.GroupName}: {result.TotalFirstGroup:N0}");
            Console.WriteLine($"üìä T·ªïng ID trong {groupB.GroupName}: {result.TotalSecondGroup:N0}");
            Console.WriteLine($"‚úÖ ID kh·ªõp ho√†n to√†n: {result.PerfectMatches:N0}");
            Console.WriteLine($"üí∞ ID l·ªách s·ªë ti·ªÅn: {result.AmountMismatches.Count:N0}");
            Console.WriteLine($"‚û°Ô∏è ID ch·ªâ c√≥ trong {groupA.GroupName}: {result.OnlyInFirst.Count:N0}");
            Console.WriteLine($"‚¨ÖÔ∏è ID ch·ªâ c√≥ trong {groupB.GroupName}: {result.OnlyInSecond.Count:N0}");
            
            if (result.AmountMismatches.Count == 0 && result.OnlyInFirst.Count == 0 && result.OnlyInSecond.Count == 0)
            {
                Console.WriteLine($"\nüéâ HO√ÄN H·∫¢O! T·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÅu kh·ªõp nhau!");
            }
            else
            {
                var totalIssues = result.AmountMismatches.Count + result.OnlyInFirst.Count + result.OnlyInSecond.Count;
                Console.WriteLine($"\n‚ö†Ô∏è Ph√°t hi·ªán {totalIssues:N0} ƒëi·ªÉm kh√°c bi·ªát c·∫ßn ki·ªÉm tra");
            }
            Console.WriteLine("" + new string('=', 55) + "\n");

            return result;
        }

        private Dictionary<long, decimal> CreateGroupDictionary(List<Dictionary<string, object>> records, 
            GroupColumnConfiguration config)
        {
            var dictionary = new Dictionary<long, decimal>();
            
            foreach (var record in records)
            {
                var idValue = record.GetValueOrDefault(config.IdColumn, "").ToString();
                var amountValue = record.GetValueOrDefault(config.AmountColumn, "0").ToString();
                
                if (!string.IsNullOrEmpty(idValue) && TryParseId(idValue, out long id))
                {
                    // Parse amount - lo·∫°i b·ªè d·∫•u ph·∫©y v√† kho·∫£ng tr·∫Øng
                    var cleanAmount = amountValue?.Replace(",", "").Replace(" ", "").Trim() ?? "0";
                    if (decimal.TryParse(cleanAmount, out decimal amount))
                    {
                        dictionary[id] = amount;
                    }
                }
            }
            
            return dictionary;
        }

        private bool TryParseId(string idString, out long id)
        {
            id = 0;
            if (string.IsNullOrWhiteSpace(idString))
                return false;

            // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† c√°c k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt
            var cleanId = idString.Trim().Replace(" ", "");
            
            // Th·ª≠ parse tr·ª±c ti·∫øp
            if (long.TryParse(cleanId, out id))
                return true;
            
            // N·∫øu c√≥ s·ªë 0 ƒë·∫ßu ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát, extract s·ªë
            var numberOnly = new string(cleanId.Where(char.IsDigit).ToArray());
            if (!string.IsNullOrEmpty(numberOnly) && long.TryParse(numberOnly, out id))
                return true;
            
            return false;
        }

        public void PrintSummary(ComparisonResult result, ComparisonType comparisonType)
        {
            Console.WriteLine("\n=== T√ìM T·∫ÆT ===");
            
            if (comparisonType == ComparisonType.TwoColumns)
            {
                Console.WriteLine($"T·ªïng s·ªë gi√° tr·ªã c·ªôt 1: {result.TotalFirstGroup}");
                Console.WriteLine($"T·ªïng s·ªë gi√° tr·ªã c·ªôt 2: {result.TotalSecondGroup}");
                Console.WriteLine($"S·ªë d√≤ng kh√°c nhau: {result.Differences.Count}");
                Console.WriteLine($"Gi√° tr·ªã ch·ªâ c√≥ ·ªü c·ªôt 1: {result.OnlyInFirst.Count}");
                Console.WriteLine($"Gi√° tr·ªã ch·ªâ c√≥ ·ªü c·ªôt 2: {result.OnlyInSecond.Count}");
                Console.WriteLine($"Gi√° tr·ªã c√≥ s·ªë l·∫ßn xu·∫•t hi·ªán kh√°c nhau: {result.AmountMismatches.Count}");
            }
            else
            {
                Console.WriteLine($"T·ªïng s·ªë ID nh√≥m 1: {result.TotalFirstGroup}");
                Console.WriteLine($"T·ªïng s·ªë ID nh√≥m 2: {result.TotalSecondGroup}");
                Console.WriteLine($"ID kh·ªõp nh∆∞ng l·ªách Amount: {result.AmountMismatches.Count}");
                Console.WriteLine($"ID ch·ªâ c√≥ ·ªü nh√≥m 1: {result.OnlyInFirst.Count}");
                Console.WriteLine($"ID ch·ªâ c√≥ ·ªü nh√≥m 2: {result.OnlyInSecond.Count}");
                Console.WriteLine($"ID kh·ªõp ho√†n to√†n (ID v√† Amount): {result.PerfectMatches}");
            }
        }
    }
}