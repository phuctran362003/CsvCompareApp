using System.Text;
using CsvCompareApp.Models;

namespace CsvCompareApp.Services
{
    public class UserInterfaceService
    {
        private readonly CsvReaderService _csvReaderService;

        public UserInterfaceService(CsvReaderService csvReaderService)
        {
            _csvReaderService = csvReaderService;
        }

        public string GetFilePath()
        {
            Console.WriteLine("=== C√îNG C·ª§ SO S√ÅNH CSV ===");
            Console.WriteLine("üìù H·ªó tr·ª£ UTF-8, Windows-1258 v√† c√°c encoding Ti·∫øng Vi·ªát\n");
            
            int attempts = 0;
            const int maxAttempts = 5;
            
            while (attempts < maxAttempts)
            {
                Console.Write("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file CSV (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ");
                string? filePath = Console.ReadLine();
                
                if (string.IsNullOrEmpty(filePath))
                {
                    attempts++;
                    Console.WriteLine("Input tr·ªëng! Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file.");
                    continue;
                }
                
                filePath = filePath.Trim();
                
                if (filePath.Equals("exit", StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("Tho√°t ch∆∞∆°ng tr√¨nh...");
                    Environment.Exit(0);
                }
                
                // Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
                if ((filePath.StartsWith("\"") && filePath.EndsWith("\"")) ||
                    (filePath.StartsWith("'") && filePath.EndsWith("'")))
                {
                    filePath = filePath[1..^1];
                }
                
                if (!File.Exists(filePath))
                {
                    attempts++;
                    Console.WriteLine($"File kh√¥ng t·ªìn t·∫°i: '{filePath}'. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.");
                    continue;
                }
                
                return filePath;
            }
            
            throw new Exception($"Qu√° nhi·ªÅu l·∫ßn nh·∫≠p sai ƒë∆∞·ªùng d·∫´n file ({maxAttempts} l·∫ßn). Ch∆∞∆°ng tr√¨nh s·∫Ω tho√°t.");
        }

        public ComparisonType GetComparisonType()
        {
            Console.WriteLine("\nCh·ªçn lo·∫°i so s√°nh:");
            Console.WriteLine("1. So s√°nh hai c·ªôt ƒë∆°n (A vs B)");
            Console.WriteLine("2. So s√°nh nh√≥m c·ªôt (ID + Amount)");
            
            int attempts = 0;
            const int maxAttempts = 5;
            
            while (attempts < maxAttempts)
            {
                Console.Write("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ");
                string? input = Console.ReadLine();
                
                if (string.IsNullOrEmpty(input))
                {
                    attempts++;
                    Console.WriteLine("Input tr·ªëng! Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2.");
                    continue;
                }
                
                if (input.Trim() == "1")
                    return ComparisonType.TwoColumns;
                else if (input.Trim() == "2")
                    return ComparisonType.GroupColumns;
                else
                {
                    attempts++;
                    Console.WriteLine($"Input kh√¥ng h·ª£p l·ªá: '{input}'. Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2!");
                }
            }
            
            Console.WriteLine($"Qu√° nhi·ªÅu l·∫ßn nh·∫≠p sai ({maxAttempts} l·∫ßn). S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: So s√°nh hai c·ªôt ƒë∆°n.");
            return ComparisonType.TwoColumns;
        }

        public Encoding? SelectEncoding()
        {
            Console.WriteLine("\nüîß Auto-detect encoding kh√¥ng th√†nh c√¥ng.");
            Console.WriteLine("Vui l√≤ng ch·ªçn encoding th·ªß c√¥ng:");
            Console.WriteLine("1. UTF-8");
            Console.WriteLine("2. UTF-8 with BOM");
            Console.WriteLine("3. Windows-1258 (Vietnamese)");
            Console.WriteLine("4. ASCII");
            Console.WriteLine("5. Windows-1252 (Western European)");
            Console.WriteLine("6. B·ªè qua (s·ª≠ d·ª•ng UTF-8)");
            
            int attempts = 0;
            const int maxAttempts = 3;
            
            while (attempts < maxAttempts)
            {
                Console.Write("Nh·∫≠p l·ª±a ch·ªçn (1-6): ");
                string? input = Console.ReadLine();
                
                if (string.IsNullOrEmpty(input))
                {
                    attempts++;
                    continue;
                }
                
                switch (input.Trim())
                {
                    case "1": return Encoding.UTF8;
                    case "2": return new UTF8Encoding(true); // UTF-8 with BOM
                    case "3": return Encoding.GetEncoding(1258); // Windows-1258
                    case "4": return Encoding.ASCII;
                    case "5": return Encoding.GetEncoding(1252); // Windows-1252
                    case "6": return null; // Skip manual selection
                    default:
                        attempts++;
                        Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                        break;
                }
            }
            
            return null; // Use default
        }

        public (bool hasHeader, List<string> columns) AnalyzeCsvFile(string filePath)
        {
            return _csvReaderService.AnalyzeCsvFile(filePath);
        }

        public (string, string) SelectTwoColumns(List<string> availableColumns)
        {
            if (availableColumns.Any())
            {
                Console.WriteLine("\nC√°c c·ªôt c√≥ s·∫µn:");
                for (int i = 0; i < availableColumns.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {availableColumns[i]}");
                }
                
                string column1 = SelectColumn(availableColumns, "Ch·ªçn c·ªôt th·ª© nh·∫•t");
                string column2 = SelectColumn(availableColumns, "Ch·ªçn c·ªôt th·ª© hai");
                
                return (column1, column2);
            }
            else
            {
                Console.Write("Nh·∫≠p t√™n c·ªôt th·ª© nh·∫•t: ");
                string? col1 = Console.ReadLine();
                Console.Write("Nh·∫≠p t√™n c·ªôt th·ª© hai: ");
                string? col2 = Console.ReadLine();
                
                return (col1 ?? "Column_1", col2 ?? "Column_2");
            }
        }

        public (GroupColumnConfiguration, GroupColumnConfiguration) SelectGroupColumns(List<string> availableColumns)
        {
            Console.WriteLine("\n=== C·∫§U H√åNH NH√ìM 1 ===");
            var group1 = ConfigureGroup(availableColumns, "Nh√≥m 1");
            
            Console.WriteLine("\n=== C·∫§U H√åNH NH√ìM 2 ===");
            var group2 = ConfigureGroup(availableColumns, "Nh√≥m 2");
            
            return (group1, group2);
        }

        private GroupColumnConfiguration ConfigureGroup(List<string> availableColumns, string groupName)
        {
            var config = new GroupColumnConfiguration { GroupName = groupName };
            
            if (availableColumns.Any())
            {
                Console.WriteLine("C√°c c·ªôt c√≥ s·∫µn:");
                for (int i = 0; i < availableColumns.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {availableColumns[i]}");
                }
                
                config.IdColumn = SelectColumn(availableColumns, $"Ch·ªçn c·ªôt ID cho {groupName}");
                config.AmountColumn = SelectColumn(availableColumns, $"Ch·ªçn c·ªôt Amount cho {groupName}");
            }
            else
            {
                Console.Write($"Nh·∫≠p t√™n c·ªôt ID cho {groupName}: ");
                config.IdColumn = Console.ReadLine() ?? "";
                
                Console.Write($"Nh·∫≠p t√™n c·ªôt Amount cho {groupName}: ");
                config.AmountColumn = Console.ReadLine() ?? "";
            }
            
            return config;
        }

        private string SelectColumn(List<string> availableColumns, string prompt)
        {
            int attempts = 0;
            const int maxAttempts = 5;
            
            while (attempts < maxAttempts)
            {
                Console.Write($"{prompt} (s·ªë th·ª© t·ª± ho·∫∑c t√™n c·ªôt): ");
                string? input = Console.ReadLine();
                
                if (string.IsNullOrEmpty(input))
                {
                    attempts++;
                    Console.WriteLine("Input tr·ªëng! Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn.");
                    continue;
                }
                
                input = input.Trim();
                
                // Th·ª≠ parse s·ªë
                if (int.TryParse(input, out int index) && index >= 1 && index <= availableColumns.Count)
                {
                    return availableColumns[index - 1];
                }
                
                // Th·ª≠ t√¨m theo t√™n
                var matchingColumn = availableColumns.FirstOrDefault(c => 
                    c.Equals(input, StringComparison.OrdinalIgnoreCase));
                
                if (matchingColumn != null)
                {
                    return matchingColumn;
                }
                
                attempts++;
                Console.WriteLine($"L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá: '{input}'. Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1-{availableColumns.Count} ho·∫∑c t√™n c·ªôt.");
            }
            
            Console.WriteLine($"Qu√° nhi·ªÅu l·∫ßn nh·∫≠p sai ({maxAttempts} l·∫ßn). S·ª≠ d·ª•ng c·ªôt ƒë·∫ßu ti√™n: {availableColumns[0]}");
            return availableColumns[0];
        }

        public bool AskToContinue()
        {
            Console.WriteLine("\nB·∫°n c√≥ mu·ªën th·ª±c hi·ªán so s√°nh kh√°c kh√¥ng?");
            Console.WriteLine("1. C√≥");
            Console.WriteLine("2. Kh√¥ng");
            
            int attempts = 0;
            const int maxAttempts = 3;
            
            while (attempts < maxAttempts)
            {
                Console.Write("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ");
                string? input = Console.ReadLine();
                
                if (string.IsNullOrEmpty(input))
                {
                    attempts++;
                    Console.WriteLine("Input tr·ªëng! Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2.");
                    continue;
                }
                
                if (input.Trim() == "1")
                    return true;
                else if (input.Trim() == "2")
                    return false;
                else
                {
                    attempts++;
                    Console.WriteLine($"Input kh√¥ng h·ª£p l·ªá: '{input}'. Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2!");
                }
            }
            
            Console.WriteLine($"Qu√° nhi·ªÅu l·∫ßn nh·∫≠p sai ({maxAttempts} l·∫ßn). Tho√°t ch∆∞∆°ng tr√¨nh.");
            return false;
        }
    }
}