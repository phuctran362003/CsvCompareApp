using System.Globalization;
using System.Text;
using CsvHelper;
using CsvHelper.Configuration;
using CsvCompareApp.Models;

namespace CsvCompareApp.Services
{
    public class CsvReaderService
    {
        public List<Dictionary<string, object>> ReadCsvFile(ColumnConfiguration config)
        {
            return ReadCsvFileWithEncoding(config, null);
        }
        
        public List<Dictionary<string, object>> ReadCsvFileWithEncoding(ColumnConfiguration config, Encoding? forcedEncoding)
        {
            try
            {
                // S·ª≠ d·ª•ng encoding ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ho·∫∑c auto-detect
                var encoding = forcedEncoding ?? DetectFileEncoding(config.FilePath);
                Console.WriteLine($"üìÑ Using encoding: {encoding.EncodingName}");
                
                using var stream = new FileStream(config.FilePath, FileMode.Open, FileAccess.Read);
                using var reader = new StreamReader(stream, encoding);
                
                var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    HasHeaderRecord = config.HasHeaderRecord,
                    Delimiter = ",", // Explicitly set delimiter
                    Quote = '"',
                    TrimOptions = TrimOptions.Trim,
                    MissingFieldFound = null, // Ignore missing fields
                    HeaderValidated = null, // Ignore header validation
                    BadDataFound = null // Ignore bad data
                };
                
                using var csv = new CsvReader(reader, csvConfig);
                
                var records = new List<Dictionary<string, object>>();
                
                if (config.HasHeaderRecord)
                {
                    csv.Read();
                    csv.ReadHeader();
                    
                    while (csv.Read())
                    {
                        var record = new Dictionary<string, object>();
                        foreach (var columnName in config.ColumnNames)
                        {
                            try
                            {
                                var value = csv.GetField(columnName);
                                record[columnName] = value ?? "";
                            }
                            catch
                            {
                                record[columnName] = "";
                            }
                        }
                        records.Add(record);
                    }
                }
                else
                {
                    while (csv.Read())
                    {
                        var record = new Dictionary<string, object>();
                        for (int i = 0; i < config.ColumnNames.Count && i < csv.ColumnCount; i++)
                        {
                            var value = csv.GetField(i);
                            record[config.ColumnNames[i]] = value ?? "";
                        }
                        records.Add(record);
                    }
                }
                
                return records;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi ƒë·ªçc file CSV: {ex.Message}");
                return new List<Dictionary<string, object>>();
            }
        }

        public (bool hasHeader, List<string> columns) AnalyzeCsvFile(string filePath)
        {
            try
            {
                var encoding = DetectFileEncoding(filePath);
                using var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
                using var reader = new StreamReader(stream, encoding);
                
                var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    Delimiter = ",",
                    Quote = '"',
                    TrimOptions = TrimOptions.Trim,
                    MissingFieldFound = null,
                    HeaderValidated = null,
                    BadDataFound = null
                };
                
                using var csv = new CsvReader(reader, csvConfig);
                
                // ƒê·ªçc d√≤ng ƒë·∫ßu ti√™n
                if (!csv.Read()) 
                    return (false, new List<string>());
                
                var firstRow = new List<string>();
                for (int i = 0; i < csv.ColumnCount; i++)
                {
                    firstRow.Add(csv.GetField(i) ?? "");
                }
                
                // ƒê·ªçc d√≤ng th·ª© hai ƒë·ªÉ ph√¢n t√≠ch
                if (!csv.Read())
                {
                    // Ch·ªâ c√≥ 1 d√≤ng, coi nh∆∞ kh√¥ng c√≥ header
                    return (false, GenerateColumnNames(firstRow.Count));
                }
                
                var secondRow = new List<string>();
                for (int i = 0; i < csv.ColumnCount; i++)
                {
                    secondRow.Add(csv.GetField(i) ?? "");
                }
                
                // Ph√¢n t√≠ch xem d√≤ng ƒë·∫ßu c√≥ ph·∫£i header kh√¥ng
                bool hasHeader = DetectHeader(firstRow, secondRow);
                
                if (hasHeader)
                {
                    Console.WriteLine($"‚úÖ Ph√°t hi·ªán header: [{string.Join(", ", firstRow)}]");
                    return (true, firstRow);
                }
                else
                {
                    var columnNames = GenerateColumnNames(firstRow.Count);
                    Console.WriteLine($"üìä Kh√¥ng c√≥ header, t·∫°o t√™n c·ªôt t·ª± ƒë·ªông: [{string.Join(", ", columnNames)}]");
                    return (false, columnNames);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi ph√¢n t√≠ch file CSV: {ex.Message}");
                return (false, new List<string>());
            }
        }

        private bool DetectHeader(List<string> firstRow, List<string> secondRow)
        {
            int numericInFirst = 0;
            int numericInSecond = 0;
            
            for (int i = 0; i < Math.Min(firstRow.Count, secondRow.Count); i++)
            {
                // Ki·ªÉm tra xem c√≥ ph·∫£i s·ªë kh√¥ng (bao g·ªìm c·∫£ decimal v√† integer)
                if (IsNumeric(firstRow[i]))
                    numericInFirst++;
                    
                if (IsNumeric(secondRow[i]))
                    numericInSecond++;
            }
            
            // N·∫øu d√≤ng ƒë·∫ßu c√≥ √≠t s·ªë h∆°n d√≤ng th·ª© hai ƒë√°ng k·ªÉ, c√≥ th·ªÉ l√† header
            // Ho·∫∑c n·∫øu d√≤ng ƒë·∫ßu kh√¥ng c√≥ s·ªë n√†o nh∆∞ng d√≤ng th·ª© hai c√≥ s·ªë
            return (numericInFirst < numericInSecond) || 
                   (numericInFirst == 0 && numericInSecond > 0) ||
                   (firstRow.Any(cell => ContainsLetters(cell)) && secondRow.All(cell => IsNumeric(cell) || string.IsNullOrEmpty(cell)));
        }

        private bool IsNumeric(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
                return false;
                
            return decimal.TryParse(value.Replace(",", ""), out _) || 
                   double.TryParse(value.Replace(",", ""), out _) ||
                   int.TryParse(value.Replace(",", ""), out _);
        }

        private bool ContainsLetters(string value)
        {
            return !string.IsNullOrEmpty(value) && value.Any(char.IsLetter);
        }

        private List<string> GenerateColumnNames(int columnCount)
        {
            var columns = new List<string>();
            for (int i = 0; i < columnCount; i++)
            {
                columns.Add($"Column_{i + 1}");
            }
            return columns;
        }

        public List<string> GetCsvHeaders(string filePath)
        {
            var (hasHeader, columns) = AnalyzeCsvFile(filePath);
            return columns;
        }

        private Encoding DetectFileEncoding(string filePath)
        {
            try
            {
                // ƒê·ªçc to√†n b·ªô file ƒë·ªÉ analyze t·ªët h∆°n
                byte[] buffer = File.ReadAllBytes(filePath);
                
                // Check for BOM (Byte Order Mark)
                if (buffer.Length >= 3 && buffer[0] == 0xEF && buffer[1] == 0xBB && buffer[2] == 0xBF)
                {
                    Console.WriteLine("üîç Found UTF-8 BOM");
                    return Encoding.UTF8;
                }
                
                if (buffer.Length >= 2 && buffer[0] == 0xFF && buffer[1] == 0xFE)
                {
                    Console.WriteLine("üîç Found UTF-16 LE BOM");
                    return Encoding.Unicode;
                }
                
                if (buffer.Length >= 2 && buffer[0] == 0xFE && buffer[1] == 0xFF)
                {
                    Console.WriteLine("üîç Found UTF-16 BE BOM");
                    return Encoding.BigEndianUnicode;
                }
                
                // Th·ª≠ c√°c encoding ph·ªï bi·∫øn cho ti·∫øng Vi·ªát
                var encodingsToTry = new[]
                {
                    Encoding.UTF8,
                    Encoding.GetEncoding("Windows-1258"), // Vietnamese
                    Encoding.GetEncoding("UTF-8"),
                    Encoding.ASCII,
                    Encoding.Default
                };
                
                foreach (var encoding in encodingsToTry)
                {
                    try
                    {
                        string decoded = encoding.GetString(buffer);
                        
                        // Check n·∫øu decode th√†nh c√¥ng v√† c√≥ k√Ω t·ª± ti·∫øng Vi·ªát
                        if (IsValidVietnameseText(decoded))
                        {
                            Console.WriteLine($"üîç Successfully decoded with {encoding.EncodingName}");
                            return encoding;
                        }
                        
                        // Check n·∫øu kh√¥ng c√≥ k√Ω t·ª± l·ªói
                        if (!decoded.Contains("ÔøΩ") && !decoded.Contains("?"))
                        {
                            Console.WriteLine($"üîç Clean decode with {encoding.EncodingName}");
                            return encoding;
                        }
                    }
                    catch
                    {
                        continue;
                    }
                }
                
                // Default fallback
                Console.WriteLine("üîç Using UTF-8 as fallback");
                return Encoding.UTF8;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è Error detecting encoding: {ex.Message}. Using UTF-8.");
                return Encoding.UTF8;
            }
        }

        private bool IsValidVietnameseText(string text)
        {
            if (string.IsNullOrEmpty(text))
                return false;
                
            // Check for Vietnamese characters
            var vietnameseChars = new[]
            {
                '√†', '√°', '·∫°', '·∫£', '√£', '√¢', '·∫ß', '·∫•', '·∫≠', '·∫©', '·∫´', 'ƒÉ', '·∫±', '·∫Ø', '·∫∑', '·∫≥', '·∫µ',
                '√®', '√©', '·∫π', '·∫ª', '·∫Ω', '√™', '·ªÅ', '·∫ø', '·ªá', '·ªÉ', '·ªÖ',
                '√¨', '√≠', '·ªã', '·ªâ', 'ƒ©',
                '√≤', '√≥', '·ªç', '·ªè', '√µ', '√¥', '·ªì', '·ªë', '·ªô', '·ªï', '·ªó', '∆°', '·ªù', '·ªõ', '·ª£', '·ªü', '·ª°',
                '√π', '√∫', '·ª•', '·ªß', '≈©', '∆∞', '·ª´', '·ª©', '·ª±', '·ª≠', '·ªØ',
                '·ª≥', '√Ω', '·ªµ', '·ª∑', '·ªπ',
                'ƒë',
                '√Ä', '√Å', '·∫†', '·∫¢', '√É', '√Ç', '·∫¶', '·∫§', '·∫¨', '·∫®', '·∫™', 'ƒÇ', '·∫∞', '·∫Æ', '·∫∂', '·∫≤', '·∫¥',
                '√à', '√â', '·∫∏', '·∫∫', '·∫º', '√ä', '·ªÄ', '·∫æ', '·ªÜ', '·ªÇ', '·ªÑ',
                '√å', '√ç', '·ªä', '·ªà', 'ƒ®',
                '√í', '√ì', '·ªå', '·ªé', '√ï', '√î', '·ªí', '·ªê', '·ªò', '·ªî', '·ªñ', '∆†', '·ªú', '·ªö', '·ª¢', '·ªû', '·ª†',
                '√ô', '√ö', '·ª§', '·ª¶', '≈®', '∆Ø', '·ª™', '·ª®', '·ª∞', '·ª¨', '·ªÆ',
                '·ª≤', '√ù', '·ª¥', '·ª∂', '·ª∏',
                'ƒê'
            };
            
            // Check n·∫øu text ch·ª©a k√Ω t·ª± ti·∫øng Vi·ªát v√† kh√¥ng c√≥ k√Ω t·ª± l·ªói
            bool hasVietnamese = vietnameseChars.Any(c => text.Contains(c));
            bool hasErrorChars = text.Contains('ÔøΩ') || text.Contains('?');
            
            return hasVietnamese && !hasErrorChars;
        }

        private bool IsValidUtf8(byte[] buffer, int length)
        {
            try
            {
                var decoder = Encoding.UTF8.GetDecoder();
                char[] chars = new char[length];
                decoder.Convert(buffer, 0, length, chars, 0, chars.Length, false, out int bytesUsed, out int charsUsed, out bool completed);
                return completed && bytesUsed == length;
            }
            catch
            {
                return false;
            }
        }

        private bool ContainsVietnameseCharacters(byte[] buffer, int length)
        {
            // Check for Vietnamese specific byte patterns in Windows-1258
            for (int i = 0; i < length; i++)
            {
                byte b = buffer[i];
                // Vietnamese characters in Windows-1258: √Ä, √Å, √à, √â, √å, √ç, √í, √ì, √ô, √ö, √ù, etc.
                if (b >= 0xC0 && b <= 0xFF)
                {
                    return true;
                }
            }
            return false;
        }
    }
}